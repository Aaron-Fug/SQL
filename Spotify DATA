# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

--What is the average danceability by artist and track? 
SELECT artist_name, track_name, AVG(danceability) FROM Spotifydata
GROUP BY artist_name, track_name
ORDER BY artist_name;

--Who are the top 10 artists based on popularity? 
SELECT artist_name FROM Spotifydata
ORDER BY popularity DESC
LIMIT 10;

--What is the average popularity of each artists who's name starts with the letter T?
SELECT DISTINCT artist_name, AVG(popularity) FROM Spotifydata
WHERE artist_name LIKE 'T%'
GROUP BY artist_name
ORDER BY AVG(popularity);

--What artist released the longest song? 
SELECT artist_name FROM Spotifydata
ORDER BY duration_ms DESC
LIMIT 1;

--Which song has the highest tempo?
SELECT track_name, MAX(tempo) FROM Spotifydata;

--What's the average danceability for the 10 most popular songs?
WITH Avg_dance AS(
SELECT track_name,
artist_name,
popularity,
danceability
FROM Spotifydata
ORDER BY popularity
LIMIT 10
)

SELECT AVG(danceability) FROM Avg_dance;
